import math
import operator

"""
every Pythagorean triple can be generated by:
{a, b, c} = {m**2 - n**2, 2mn, m**2 + n**2}
where m, n are positive integers, m > n, and gcd(m, n) == 1
a + b + c = 2m**2 + 2mn = P -> 0.5P = m**2 + mn -> sqrt(0.5P) > m > n
"""


def get_right_angle_triangle_perimeter_with_max_pythagorean_triplets_below_bound(bound):
    perimeters_and_times = dict()
    for s in range(math.ceil(math.sqrt(bound // 2)) + 1):
        for t in range(s):
            if math.gcd(s, t) == 1:
                update_perimeters_and_times(s, t, perimeters_and_times)
    return max(perimeters_and_times.items(), key=operator.itemgetter(1))[0]


def update_perimeters_and_times(s, t, perimeters_and_times):
    a, b, c = s ** 2 - t ** 2, 2 * s * t, s ** 2 + t ** 2
    index = a + b + c
    if a ** 2 + b ** 2 == c ** 2:
        if index in perimeters_and_times:
            perimeters_and_times[index] += 1
        else:
            perimeters_and_times[index] = 1


if __name__ == "__main__":
    n = 1000
    print(get_right_angle_triangle_perimeter_with_max_pythagorean_triplets_below_bound(n))
