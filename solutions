################################# problem 1 ##################################


def seq(n):
    return (n*(n+1))/2


print(3*seq(333) + 5*seq(199) - 15*seq(66))


################################# problem 2 ##################################


a = 1
b = 2
c = 0
even_sum = 0

while c < 4000000:
    c = a + b
    a = b
    b = c

    if (a % 2) == 0:
        even_sum += a

print(even_sum)


################################# problem 3 ##################################


divisors = [1]
number = 600851475143
p = 2
temp = number


def find_primes(num, prime):
    while prime < num:
        if num / prime == 1:
            return num

        if num / prime == int(num / prime):
            return prime

        prime += 1
    return 1


def multiply(div):
    num = 1
    for n in div:
        num *= n
    return num


while multiply(divisors) < number:
    q = find_primes(temp, p)
    temp /= q
    if q != 1:
        divisors.append(q)

    else:
        divisors.append(int(temp))
        break

print(max(divisors))


################################# problem 4 ##################################


def is_palindrom(num):
    num = str(num)
    half1 = num[0:3]
    half2 = num[5] + num[4] + num[3]
    return half1 == half2


numbers = []
pals = []

for i in range(100):
    numbers.append([999 * (999 - i), 999 - i])

for j in range(100):
    for i in numbers:
        if is_palindrom(i[0]):
            pals.append(i[0])
        i[0] -= i[1]

print(max(pals))




################################ problem 5 ##################################


num = 2520
primes = []

while num > 1:
    div = 0
    for i in range(20):
        if num / (i + 2) == int(num / (i + 2)):
            primes.append(i + 2)
            div = i + 2
            break
    num /= div

for j in range(10):
    p = j + 11
    for i in primes:
        if p % i == 0:
            p = int(p/i)

    primes.append(p)

for i in primes:
    num *= i

print(num)


################################ problem 6 ##################################


sum_of_squares = 0
square_of_sum = 0

for i in range(101):
    square_of_sum += i
    sum_of_squares += i*i

square_of_sum *= square_of_sum

print(square_of_sum - sum_of_squares)


################################ problem 7 ##################################


def is_prime(num, primes):
    for i in primes:
        if num % i == 0:
            return False
    return True

primes = [2]
cur = 3

while len(primes) < 10001:
    if is_prime(cur, primes):
        primes.append(cur)
    cur += 2

print(primes)


################################ problem 25 ##################################


a = 89
b = 144
counter = 12

while len(str(b)) < 1000:
    temp = a
    a = b
    b += temp
    counter += 1

print (counter)












